import React, { useState, useEffect } from 'react';
import { useMutation } from 'convex/react';
import { api } from '../../../convex/_generated/api';
import { Id } from '../../../convex/_generated/dataModel';
import { toast } from 'sonner';

const ProblemGenerator = ({ sessionId, userId }) => {
  const [topic, setTopic] = useState('');
  const [difficulty, setDifficulty] = useState(1);
  const [generatedProblems, setGeneratedProblems] = useState([]);

  const generateProblems = useMutation(api.problems.create);

  const handleGenerate = async () => {
    if (!topic || !sessionId || !userId) return;

    try {
      const problems = await generateProblems({
        sessionId: sessionId as Id<"studySessions">,
        content: `Generate a ${difficulty} difficulty problem on ${topic}`,
        solution: 'Solution will be generated by AI',
        difficulty: difficulty,
        tags: [topic],
        generatedBy: userId,
      });

      setGeneratedProblems(problems);
      toast.success('Problems generated successfully');
    } catch (error) {
      console.error('Error generating problems:', error);
      toast.error('Failed to generate problems');
    }
  };

  return (
    <div className="problem-generator">
      <h2 className="text-lg font-semibold">Generate Practice Problems</h2>
      <input
        type="text"
        placeholder="Enter topic"
        value={topic}
        onChange={(e) => setTopic(e.target.value)}
        className="input"
      />
      <select
        value={difficulty}
        onChange={(e) => setDifficulty(Number(e.target.value))}
        className="select"
      >
        <option value={1}>Easy</option>
        <option value={2}>Medium</option>
        <option value={3}>Hard</option>
      </select>
      <button onClick={handleGenerate} className="button">
        Generate Problems
      </button>

      {generatedProblems.length > 0 && (
        <div className="generated-problems">
          <h3 className="text-md font-medium">Generated Problems:</h3>
          <ul>
            {generatedProblems.map((problem) => (
              <li key={problem.id} className="problem-item">
                {problem.content}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default ProblemGenerator;